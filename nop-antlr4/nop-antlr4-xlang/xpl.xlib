<lib>
    <xpl>
        <!--
        @param xpl:ignoreNs 忽略指定的名字空间，不把它们看作是xpl标签库中的标签
        @param xpl:checkNs 取消xpl:ignoreNs的作用，恢复识别指定名字空间对应的标签库
       -->
        <tag xpl:if="boolean" xpl:lib="a.xlib,b.xlib"
             xpl:is="string"
             xpl:outputMode="string"
             xpl:return="string"
             xpl:ignoreTag="boolean"
             xpl:ignoreExpr="boolean"
             xpl:ignoreNs="csv-set"
             xpl:checkNs="csv-set"
             xpl:slots="${xx}"
        >
            <xpl:decorator>
                <biz:WhenAdmin/>
            </xpl:decorator>
            <title slot:scope="abc"/>
        </tag>
    </xpl>

    <c:slot slot:name="ss" a="1" b="2" slot:bind="${abc}"/>

    <title slot:scope="abc">
    </title>

    <data args="@: data">
        <template slot="a" scope="abc">
        </template>
    </data>

    <import>
        <description>
            导入标签库，类，enum等
        </description>

        <example>
            <c:import class="nop.NopUser"/>
            <c:import from="/nop/core/xlib/core.xlib" as="my-core"/>
        </example>

        <attr name="from" type="string" domain="vPath"/>
        <attr name="class" type="string" domain="class"/>
        <attr name="as" type="string" domain="varName"/>

        <validation>
            <oneOf>
                <notEmpty name="from"/>
                <notEmpty name="class"/>
            </oneOf>
        </validation>
    </import>

    <if>
        <description>
            判断语句
        </description>

        <example>
            <c:script>
                x = 3
            </c:script>

            <c:if test="${x > 2}">

            </c:if>
        </example>

        <attr name="test"/>
        <slot name="default"/>

        <source src="">

        </source>
    </if>

    <for>
        <description>
            循环语句
        </description>

        <example>
            <c:for items="${[1,2,3]}" var="s" varStatus="vs">
            </c:for>

            <c:for begin="0" end="10" var="s">

            </c:for>
        </example>

        <attr name="var" type="string"/>
        <attr name="items" type="java.util.Iterable"/>
        <attr name="varStatus" type="io.nop.commons.collections.iterator.LoopVarStatus"/>
        <attr name="begin" type="int"/>
        <attr name="end" type="int"/>
        <attr name="step" type="int"/>
        <slot name="default"/>

        <validation>
            <oneOf errorCode="nop.err.invalid-for-vars">
                <and>
                    <notNull name="items"/>
                    <notNull name="var"/>
                </and>
                <and>
                    <notNull name="begin"/>
                    <notNull name="end"/>
                </and>
            </oneOf>
        </validation>
    </for>

    <while>
        <attr name="test" type="boolean"/>
        <slot name="default"/>
    </while>

    <break>
        <description>
            跳出当前循环
        </description>
    </break>

    <continue>
        <description>
            相当于程序语言中的continue语句
        </description>
    </continue>

    <return>
        <attr name="value" type="any"/>
    </return>

    <choose keepSlotOrder="true">
        <example>
            <c:choose>
                <c:slot-arg name="catch" value="${value}"/>
            </c:choose>
        </example>
        <attr name="test" type="boolean"/>

        <slot name="case" allowKind="condition"
              maxCount="10" fillByKind="true">
            <attr name="test" type="boolean" allowExpr="required"/>
        </slot>
        <slot name="default" allowKind="otherwise" fillByKind="true"/>
    </choose>

    <try keepSlotOrder="true">
        <slot name="body"/>
        <slot name="catch" maxCount="10" allowKind="catch" fillByKind="true"/>
        <slot name="finally" allowKind="finally" fillByKind="true"/>
    </try>

    <catch kind="catch">
        <attr name="name" type="string"/>
        <attr name="type" type="type"/>

        <slot name="default"/>
    </catch>

    <finally kind="finally">
        <slot name="default"/>
    </finally>

    <when kind="condition">
        <attr name="test"/>
        <slot name="default"/>
    </when>

    <otherwise kind="otherwise">
        <slot name="default"/>
    </otherwise>

    <macro macro="true">
        <description>
            编译期运行，并将原标签替换为运行输出内容。
            也就是说先编译内容，然后运行编译结果。运行时输出的内容会替换原标签，然后再进行编译。
        </description>

        <slot name="default"/>
    </macro>

    <script>
        <attr name="lang" type="string"/>
        <slot name="default"/>
    </script>

    <unit>
        <description>
            虚拟标签，仅起容器作用
        </description>
        <slot name="default"/>
    </unit>

    <out>
        <attr name="escape" type="string" enum="io.nop.xlang.ast.XLangEscapeMode" default="xml"/>
        <slot name="default"/>
    </out>

    <collect>
        <description>
            收集标签输出内容
        </description>

        <attr name="outputMode" type="io.nop.xlang.xpl.XplOutputMode"/>

        <slot name="default"/>

    </collect>

    <print>
        <description>
            原样输出标签内容，不识别xpl标签，也不识别表达式
        </description>
        <slot name="default"/>
    </print>

    <include>
        <description>
            相当于直接将引用文件内容嵌入到当前位置
        </description>
        <attr name="src" type="string" domain="vPath"/>
    </include>

    <!--
        <slot:xx a="1" b="2" />
    -->
    <slot allowUnknownSlot="false">
        <attr name="name" type="string"/>
        <attr name="bind" type="any"/>
        <slot name="default"/>
    </slot>

    <throw>
        <attr name="errorCode" type="string"/>
        <attr name="params" type="map"/>
    </throw>

    <check>
        <attr name="value" required="true"/>
        <attr name="valueType" type="string"/>
        <attr name="errorCode" type="string" domain="errorCode"/>
        <attr name="errorParams" type="map"/>
        <attr name="silent" type="boolean">
            <description>
                如果设置了silent, 则验证失败会返回CheckResultBean。否则验证失败会抛出异常。
            </description>
        </attr>

        <slot name="default">
            <schema xdef:ref="filter.xdef"/>
        </slot>

        <return type="io.nop.api.support.beans.CheckResultBean"/>
    </check>
</lib>