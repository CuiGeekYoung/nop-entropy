<gateway x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:xdef="/nop/schema/xdef.xdef"
         xdef:bean-package="io.nop.graphql.gateway.model" xdef:name="GatewayModel">

    <routes xdef:body-type="list" xdef:key-attr="id">
        <!--
        @serviceName 通过RPC机制调用分布式RPC服务
        @rawResponse 返回的response对象是否原始响应对象还是标准的ApiResponse对象。集成外部服务时会使用rawResponse
        @mock 如果设置为true，则只会调用handler返回，不会执行分布式RPC
        -->
        <route id="!string" serviceName="string" xdef:name="GatewayRouteModel" mock="!boolean=false" rawResponse="!boolean=false">
            <!--
            @path 对应REST请求链接，例如 /r/NopAuthUser__findPage
            @pattern 支持指定前缀或者后缀的简单匹配模式，例如 XYZ*或者 *XYZ
            -->
            <on-path path="!string" pattern="string" xdef:name="GatewayOnPathModel" xdef:unique-attr="path"/>

            <!--
            路由的动态匹配条件
            -->
            <match xdef:value="xpl-predicate"/>

            <!--
            匹配路由后可以直接响应。如果配置了serviceName且不是mock模式，则在执行handler之后会调用分布式RPC服务
            -->
            <handler xdef:value="xpl"/>

            <!--
            对应分布式RPC返回的结果进行处理
            -->
            <on-response xdef:value="xpl"/>

            <!--
            调用过程出现异常时会调用这里的代码，将异常对象包装为异常消息
             -->
            <on-error xdef:value="xpl"/>
        </route>
    </routes>

</gateway>